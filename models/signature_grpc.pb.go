// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: signature.proto

package models

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SignatureClient is the client API for Signature service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SignatureClient interface {
	Get(ctx context.Context, in *SignatureRequest, opts ...grpc.CallOption) (Signature_GetClient, error)
}

type signatureClient struct {
	cc grpc.ClientConnInterface
}

func NewSignatureClient(cc grpc.ClientConnInterface) SignatureClient {
	return &signatureClient{cc}
}

func (c *signatureClient) Get(ctx context.Context, in *SignatureRequest, opts ...grpc.CallOption) (Signature_GetClient, error) {
	stream, err := c.cc.NewStream(ctx, &Signature_ServiceDesc.Streams[0], "/models.Signature/Get", opts...)
	if err != nil {
		return nil, err
	}
	x := &signatureGetClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Signature_GetClient interface {
	Recv() (*SignatureResponse, error)
	grpc.ClientStream
}

type signatureGetClient struct {
	grpc.ClientStream
}

func (x *signatureGetClient) Recv() (*SignatureResponse, error) {
	m := new(SignatureResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SignatureServer is the server API for Signature service.
// All implementations must embed UnimplementedSignatureServer
// for forward compatibility
type SignatureServer interface {
	Get(*SignatureRequest, Signature_GetServer) error
	mustEmbedUnimplementedSignatureServer()
}

// UnimplementedSignatureServer must be embedded to have forward compatible implementations.
type UnimplementedSignatureServer struct {
}

func (UnimplementedSignatureServer) Get(*SignatureRequest, Signature_GetServer) error {
	return status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedSignatureServer) mustEmbedUnimplementedSignatureServer() {}

// UnsafeSignatureServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SignatureServer will
// result in compilation errors.
type UnsafeSignatureServer interface {
	mustEmbedUnimplementedSignatureServer()
}

func RegisterSignatureServer(s grpc.ServiceRegistrar, srv SignatureServer) {
	s.RegisterService(&Signature_ServiceDesc, srv)
}

func _Signature_Get_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SignatureRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SignatureServer).Get(m, &signatureGetServer{stream})
}

type Signature_GetServer interface {
	Send(*SignatureResponse) error
	grpc.ServerStream
}

type signatureGetServer struct {
	grpc.ServerStream
}

func (x *signatureGetServer) Send(m *SignatureResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Signature_ServiceDesc is the grpc.ServiceDesc for Signature service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Signature_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "models.Signature",
	HandlerType: (*SignatureServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Get",
			Handler:       _Signature_Get_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "signature.proto",
}
